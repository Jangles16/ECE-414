Take Home Test Code
Josh Andrews
ECE 414  4/9/18

%% Q1 - Root Locus Design

%% Get the Plant
clc; clear all;
G = ece414planttf(6,10,.45);
%% Plot root locus for all Alpha
% will use to see where zeros can be placed
% figure(1); clf;
% for i = 0:.1:.9
%     G = ece414planttf(6,10,i);
%     rlocus(G)
%     grid on
%     axis([-20 0 -25 25]);
%     hold on
% end
% legend(['alpha = ' num2str(0)],['alpha = ' num2str(.1)],['alpha = ' num2str(0.2)],['alpha = ' num2str(0.3)], ['alpha = ' num2str(0.4)], ['alpha = ' num2str(0.5)], ['alpha = ' num2str(0.6)], ['alpha = ' num2str(0.7)], ['alpha = ' num2str(0.8)], ['alpha = ' num2str(0.9)]);
%% Set up PI controller
% Need at least I, as we need pole at origin for ess=0, and both PD and PID are not realiziable due to the improper controller effort transfer function
s=tf('s');
%zero location and gain
z = 18;
k = 29;
%controller and system tf
D = (k * (s + z))/s
%% Use to test step response and final rlocus
figure(1); clf;
L = D*G;
rlocus(L)
grid on;
% T = feedback(L,1);
% figure(1); clf;
% step(T);
% axis([0 2.5 0 1.1])
%% Now test to see how paramters change with alpha for same controller
% for i = 0:1:99
%     G = ece414planttf(6,10,(i/100));
%     L = D*G;
%     U = D/(1+L);
%     info = stepinfo(U);
%     peak(i+1) = info.Peak;
%     info = margins(L);
%     PM(i+1) = info.Pm;
%     T = feedback(L,1);
%     info = stepinfo(T);
%     OS(i+1) = info.Overshoot;
%     ts(i+1) = info.SettlingTime;
%     [Smax,Wsp]=PeakSens(L);
%     max(i+1) = Smax;
% end
% i=linspace(0,.99,100);
% figure(1); clf;
% subplot(2,2,1)
% yyaxis left
% plot(i,max)
% ylabel('Peak Sensitivity')
% yyaxis right
% plot(i,ts)
% xlabel('\alpha')
% ylabel('Settling Time (s)')
% title('Peak Sensitivity and Settling Time vs \alpha')
% subplot(2,2,2)
% plot(i,OS)
% xlabel('\alpha')
% ylabel('Overshoot (%)')
% title('%Overshoot vs \alpha')
% subplot(2,2,3)
% plot(i,peak)
% xlabel('\alpha')
% ylabel('Peak Controller Effort')
% title('Peak Controller Effort vs \alpha')
% subplot(2,2,4)
% plot(i,PM)
% xlabel('\alpha')
% ylabel('Phase Margin (\circ)')
% title('Phase Margin vs \alpha')

%% Q2 - PIDTuner Design

%% Get the plant
% by testing a few plants with different alphas with only one controller I
% was able to see that overshoot was at max with a=0.45 and time was
% longest when a=0.99
%clear all; clc;
s = tf('s');
%G = ece414planttf(6,10,0.45);
%C=pidtune(G, 'PI')
%pidTuner(G, C);
%% Test all for all alpha
for i = 0:1:99
    G = ece414planttf(6,10,(i/100));
    L = C*G;
    U = C/(1+L);
    info = stepinfo(U);
    peak(i+1) = info.Peak;
    info = margins(L);
    PM(i+1) = info.Pm;
    T = feedback(L,1);
    info = stepinfo(T);
    OS(i+1) = info.Overshoot;
    ts(i+1) = info.SettlingTime;
    [Smax,Wsp]=PeakSens(L);
    max(i+1) = Smax;
end
i=linspace(0,.99,100);
figure(1); clf;
subplot(2,2,1)
yyaxis left
plot(i,max)
ylabel('Peak Sensitivity')
yyaxis right
plot(i,ts)
xlabel('\alpha')
ylabel('Settling Time (s)')
title('Peak Sensitivity and Settling Time vs \alpha')
subplot(2,2,2)
plot(i,OS)
xlabel('\alpha')
ylabel('Overshoot (%)')
title('%Overshoot vs \alpha')
subplot(2,2,3)
plot(i,peak)
xlabel('\alpha')
ylabel('Peak Controller Effort')
title('Peak Controller Effort vs \alpha')
subplot(2,2,4)
plot(i,PM)
xlabel('\alpha')
ylabel('Phase Margin (\circ)')
title('Phase Margin vs \alpha')

%% Q3 - PIDsearch Design

G = ece414planttf(6,10,0.45);
Cbase = (37.9*(s+18))/s
C = pidsearch(G, Cbase, 'OS')
L = G*C
T=feedback(L,1)
% figure(2); clf;
% step(T)


%% Question 4 - Unity LAM takehome test

% First find nominal plant, will use alpha = 0.5
clear all; clc;
G=ece414planttf(6,10,0.5)
%G=tf(G)
s=tf('s');
N=26.97;
Ds = s^3 + 29.2*s^2 + 453.3*s + 2779
Dneg = -s^3 + 29.2*s^2 - 453.3*s + 2779
% now we need to find Do for the lamdesign function, which means find Qs
% Q=D(s)*D(-s)+qN(s)N(-s) where G=N/D
% DnegS = -s^3 + 29.2*s^2 - 453.3*s + 2779
% %and N(s) = N(-s) = 26.972
% N = 26.97;
% % Now we need to pick an arbitrary q
% %and compute Q(s)
% %q = 100;
q = 100;
Dd=Ds*Dneg
Q = Dd + q*N^2
% %and writing as vector     
r = roots(Q.Numerator{1,1})
% % take the neg real roots 
Do = poly([r(1) r(2) r(3) r(1) r(2) r(3)])
[D,T,Tu,Td,L]=lamdesign(G,Do);
% figure(4); clf;
% subplot(1,2,1)
% step(T);
% subplot(1,2,2)
% step(Tu);


%% Question 5 - 2 parameter LAM

G=ece414planttf(6,10,0.5)

[F,H,Tu,Td,L] = lamdesign(G,T,[-15])
